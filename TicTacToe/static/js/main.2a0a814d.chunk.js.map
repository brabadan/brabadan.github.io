{"version":3,"sources":["components/ScoreBoard.js","components/TicTacToe.js","components/StartPage.js","App.js","serviceWorker.js","index.js"],"names":["ScoreBoard","react_default","a","createElement","className","this","props","scorePlayer","scoreComputer","Component","TicTacToe","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onClickCell","bind","assertThisInitialized","state","steps","deckCells","Array","join","split","_i","_checkMatrix","length","raw","i","isSomeoneWin","n","map","cell","index","e","_this2","playerCellNumber","target","dataset","number","slice","push","setState","setTimeout","alert","initDeck","computerMove","_this3","components_ScoreBoard","style","width","cellSize","height","onClick","data-number","key","trim","left","top","Math","floor","fontSize","StartPage","App","showStartPage","closeStartPage","src_components_StartPage","src_components_TicTacToe","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2a0a814d.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport './Scoreboard.css';\r\n\r\n/**\r\n * Игровое табло\r\n * @props.scorePlayer - счет Игрока\r\n * @props.scoreComputer - счет компьютера\r\n */\r\nclass ScoreBoard extends Component{\r\n    render() {\r\n        return (\r\n            <div className=\"scoreboard\">\r\n                <div>\r\n                    <h4>Счет:</h4>\r\n                    <table className=\"scoreboard-table\">\r\n                        <thead>\r\n                        <tr>\r\n                            <td> Человек:</td>\r\n                            <td>Компьютер</td>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td>\r\n                                {this.props.scorePlayer}\r\n                            </td>\r\n                            <td>\r\n                                {this.props.scoreComputer}\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ScoreBoard;","import React, {Component} from 'react';\r\nimport './TicTacToe.css';\r\nimport ScoreBoard from './ScoreBoard';\r\n\r\nconst PLAYER_SYMBOL = 'X'; // Символ, которым играет Игрок\r\nconst COMPUTER_SYMBOL = 'O'; //  Символ, которым играет Компьютер\r\n\r\n/**\r\n * Компонент - Игра Крестики-Нолики\r\n * @props.cellSize - размер ячейки в пикселях\r\n */\r\nclass TicTacToe extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onClickCell = this.onClickCell.bind(this);\r\n        this.state = {\r\n            steps: [], // Записываем номера выбранных клеток\r\n            deckCells: Array(9).join(',').split(','), // Массив клеток (слева-направо, сверху-вниз)\r\n            scorePlayer: 0,\r\n            scoreComputer: 0\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Функция проверяет собранна-ли линия(любая, хоть крестики, хоть нолики)\r\n     * @param deckCells - Массив клеток\r\n     * @returns {boolean} - возвращаем true, если собрана\r\n     */\r\n    isSomeoneWin(deckCells) {\r\n        const checkMatrix = [ // Массив вариантов линий\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 4, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [2, 4, 6]\r\n        ];\r\n        for (let raw of checkMatrix) { // по каждому варианту линии проверяем одинаковость символов\r\n            if (deckCells[raw[0]] && deckCells[raw[0]] === deckCells[raw[1]] && deckCells[raw[0]] === deckCells[raw[2]]) {\r\n                return true; // Есть линия символов вряд\r\n            }\r\n        }\r\n        return false; // Нет линии\r\n    }\r\n\r\n    /**\r\n     * Функция счтиает ход для Компьютера\r\n     * @param deckCells - Массив клеток\r\n     * @returns number - возвращаем номер клетки, для хода Компьютера\r\n     */\r\n    computerMove(deckCells) {\r\n        // Ищем победные ходы для Компьютера\r\n        for (let i = 0; i < 9; i++) { // Цикл по всем клеткам\r\n            if (!deckCells[i]) { // Если клетка пустая,\r\n                deckCells[i] = COMPUTER_SYMBOL; // делаем сюда ход Компьютера\r\n                if (this.isSomeoneWin(deckCells)) { // и проверяем, что он победный\r\n                    return i; // если победный ход - возращаем номер клетки\r\n                } else deckCells[i] = ''; // иначе очищаем её обратно\r\n            }\r\n        }\r\n        // Ищем возможные победные ходы Игрока\r\n        for (let i = 0; i < 9; i++) { // Цикл по всем клеткам\r\n            if (!deckCells[i]) { // Если клетка пустая,\r\n                deckCells[i] = PLAYER_SYMBOL; // делаем сюда ход Игрока\r\n                if (this.isSomeoneWin(deckCells)) { // и проверяем, что он победный\r\n                    return i; // если да, то возвращаем номер клетки (перекрываем игроку победный ход)\r\n                } else deckCells[i] = ''; // иначе очищаем её обратно\r\n            }\r\n        }\r\n        // Если нет победных ходов, то выбираем в порядке: центр, угловые, остальные\r\n        const n = deckCells.map((cell, index) => cell ? \"\" : index); // создаем массив с номерами пустых клеток(а занятые делаем пустыми)\r\n        return n[4] || n[0] || n[2] || n[6] || n[8] || n[1] || n[3] || n[5] || n[7]; // возвращаем номер\r\n    }\r\n\r\n    /**\r\n     * Функция при клике на клетку\r\n     * @param e - DOM-элемент на который кликнул Игрок\r\n     */\r\n    onClickCell(e) {\r\n        const playerCellNumber = e.target.dataset.number; // Номер клетки, куда кликнул Игрок\r\n        if (!playerCellNumber || this.state.deckCells[playerCellNumber]) return; // Если клета занята - не реагируем\r\n\r\n        const steps = this.state.steps.slice(0); // Массив шагов Игры\r\n        steps.push(playerCellNumber); // Добавляем последний ход\r\n        const deckCells = this.state.deckCells.slice(0); // Массив клеток Игры\r\n        deckCells[playerCellNumber] = PLAYER_SYMBOL; // Заполняем клетку Игрока\r\n\r\n        if (this.isSomeoneWin(deckCells)) { // Если Игрок выиграл\r\n            this.setState({deckCells}, // Записываем последний ход и\r\n                () => {\r\n                    setTimeout(() => { // Делаем паузу перед поздравлением, для обновления экрана\r\n                        alert('Поздравляю Вас с победой!!!');\r\n                        const scorePlayer = this.state.scorePlayer + 1; // Счетчик Игрока увеличиваем и\r\n                        this.setState({scorePlayer}); // сохраняем\r\n                        this.initDeck(); // Очищаем игровое поле\r\n                    }, 200)\r\n                });\r\n        } else if (steps.length === 9) { // иначе, если ничья\r\n            this.setState({deckCells}, // Записываем последний ход и\r\n                () => {\r\n                    setTimeout(() => { // Делаем паузу перед поздравлением, для обновления экрана\r\n                        alert('Эта партия сыграна вничью!');\r\n                        const scorePlayer = this.state.scorePlayer + 0.5; // Делим одно очко на двоих :)\r\n                        const scoreComputer = this.state.scoreComputer + 0.5;\r\n                        this.setState({scorePlayer, scoreComputer}); // Обновляем счёт\r\n                        this.initDeck(); // Очищаем игровое поле\r\n                    }, 200)\r\n                }\r\n            );\r\n        } else { // иначе, ходит компьютер\r\n            const computerMove = this.computerMove(deckCells);\r\n            steps.push(computerMove);\r\n            deckCells[computerMove] = COMPUTER_SYMBOL;\r\n            if (this.isSomeoneWin(deckCells)) {\r\n                this.setState({deckCells}, // Записываем последний ход и\r\n                    () => {\r\n                        setTimeout(() => { // Делаем паузу перед сообщением, для обновления экрана\r\n                            alert('Эту партию выиграл компьютер. Попробуйте сыграть ещё раз.');\r\n                            const scoreComputer = this.state.scoreComputer + 1;\r\n                            this.setState({scoreComputer}); // Обновляем счёт\r\n                            this.initDeck(); // Очищаем игровое поле\r\n                        }, 200)\r\n                    }\r\n                );\r\n            } else { // Иначе - это обычный ход и\r\n                this.setState({deckCells, steps}); // сохраняем его\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Функция очищает игровое поле и начинает игру заново\r\n     */\r\n    initDeck() {\r\n        const deckCells = Array(9).join(',').split(',');\r\n        const steps = [];\r\n        this.setState({deckCells, steps});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/*Выводим табло*/}\r\n                <ScoreBoard scorePlayer={this.state.scorePlayer}\r\n                            scoreComputer={this.state.scoreComputer}\r\n                />\r\n                {/*выводим игровое поле*/}\r\n                <div className=\"deck\"\r\n                     style={{\r\n                         width: (3 * this.props.cellSize) + 'px',\r\n                         height: (3 * this.props.cellSize) + 'px',\r\n                     }}\r\n                >\r\n                    {/*выводим кажду клетку*/}\r\n                    {this.state.deckCells.map((cell, index) => {\r\n                        return (\r\n                            <div onClick={this.onClickCell}\r\n                                 data-number={index}\r\n                                 key={index}\r\n                                 className={cell.trim() ? 'cell-busy deck-cell' : 'cell-empty deck-cell'}\r\n                                 style={{\r\n                                     left: (this.props.cellSize * (index % 3) - 1) + 'px',\r\n                                     top: (this.props.cellSize * Math.floor(index / 3) - 1) + `px`,\r\n                                     width: this.props.cellSize + 'px',\r\n                                     height: this.props.cellSize + 'px',\r\n                                     fontSize: (this.props.cellSize * 2 / 3) + 'px'\r\n                                 }}\r\n                            >\r\n                                {cell}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n                <button onClick={this.initDeck.bind(this)}>Играть сначала</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TicTacToe;","import React, {Component} from 'react';\r\nimport './StartPage.css';\r\n\r\n/**\r\n * Стартовая страница, показываем при открытии Игры\r\n */\r\nclass StartPage extends Component {\r\n    render () {\r\n        return (\r\n            <div className=\"start-page\"\r\n\r\n            >\r\n                <span>\r\n                    Крестики-нолики – классическая игра,<br></br>\r\n                    в которую сражались на переменке<br></br>\r\n                    в школе дети многих поколений.<br></br>\r\n                    <br></br>\r\n                    Правила игры классические:<br></br>\r\n                    Задача – поставить 3 фигуры в клетки <br></br>\r\n                    так, чтобы по диагонали, вертикали <br></br>\r\n                    или горизонтали получилась линия.<br></br>\r\n                    <br></br>\r\n                    Вы играете крестиками, а компьютер ноликами.\r\n                    Ваш ход первый.\r\n                    <br></br>\r\n                    <b>Кликните мышкой по экрану, для начала ИГРЫ</b>\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StartPage;","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport TicTacToe from './components/TicTacToe';\r\nimport StartPage from './components/StartPage';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        showStartPage: true // Условие показа стартовой страницы\r\n    };\r\n\r\n    // Функция - Закрывает стартовую страницу\r\n    closeStartPage() {\r\n        this.setState({showStartPage: false});\r\n    }\r\n\r\n    render() {\r\n        // Если надо - показываем стартовую страницу\r\n        if (this.state.showStartPage) {\r\n            return (\r\n                <div className=\"App-start-page\"\r\n                     onClick={this.closeStartPage.bind(this)}\r\n                >\r\n                    <StartPage/>\r\n                </div>\r\n            )\r\n        } else // Иначе показываем основную страницу\r\n            return (\r\n                <div className=\"App\">\r\n                    {/*шапка*/}\r\n                    <header className=\"App-header\">\r\n                        <h6>TIC-TAC-TOE === КРЕСТИКИ-НОЛИКИ</h6>\r\n                    </header>\r\n                    {/*ИГРА*/}\r\n                    <TicTacToe cellSize=\"60\"/>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById('root')\r\n);\r\nserviceWorker.register();"],"sourceRoot":""}